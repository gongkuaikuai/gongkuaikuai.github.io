**\#嵌套循环关联\#
**\#hash连接 合并连接\#**
**sql优化 **
**sql预估成本cost**
**优化器**
**MySQL慢日志。响应时间、扫描行数、返回行数**
**explain extend** **show warnings**
**show profile**
**show status**
**SHOW FULL PROCESSLIST**
**慢查询日志**

##### MySQL的组成结构
- 连接器：连接处理、授权认证、安全
- 解析器：生成解析树
- 优化器：重写查询、决定表的读取顺序，选择合适索引。
- 存储引擎：存储和提取数据，但不会解析SQL

##### 影响数据库性能的几方面
发起请求到响应，中间会有很多步骤. *TODO*
- 过多的连接
- cpu资源不足
- 锁等待
- 频繁的磁盘读写
###### 两种耗时原因
- 执行时间长
- 等待时间长

###### MySQL性能测量工具
- show status 返回计数器
- profiling 返回sql执行时间
- explain 查看执行计划

##### 性能优化三方向
- 表结构
- 索引
- 查询语句

##### show status使用说明
- show status可以根据需要加上参数“session”或“global”来显示不同级别的统计结果
- show status like 'Com_%'。Com_xxx表示每个语句的执行次数。
  - Com_select：执行SELECT操作的次数，一次查询只累加1
  - Com_insert：执行INSERT操作的次数，对于批量插入的INSERT操作，只累加一次
  - Com_update：执行UPDATE操作的次数
  - Com_delete：执行DELETE操作的次数
- show status like 'Innodb_%'。
  -Innodb_rows_read:SELECT查询返回的行数
  -Innodb_rows_inserted:Insert操作插入的行数
  -Innodb_rows_updated:同理
  -Innodb_rows_updated:同理
- show status where variable_name like 'handler%' or variable_name like 'created%';
- 'Com_commit'及‘Com_rollback’可以查看事物情况
- Connections:试图连接MySQL服务器的次数
- Uptime：服务器工作时间
- Slow_queries:慢查询的次数


##### SHOW PROCESSLIST
查看线程状态。状态与profile的状态相同

##### 慢查询日志
用--log-slow-queries[=file_name]选项启动时，mysqld写一个包含所有执行时间超过long_query_time秒的SQL语句的日志文件

##### EXPLAIN ...
查看执行计划

##### 各字段释义 参考（《深入浅出MySQL》）
- id
- select_type:
  - SIMPLE(简单表，即不使用表连接或自查询)、
  - PRIMARY（主查询，即外层的查询）、
  - UNION（UNION中非首个的查询语句）、
  - SYBQUERY（子查询中的第一个SELECT）、
  - DERIVED
- table：输出结果集的表
- type：MySQL在表中找到所需行的方式，或者叫访问类型。
  - ALL（全表扫描）
    - expalin select * from film where rating > 9
  - index（索引全扫描，MySQL遍历整个索引来查询匹配的行)
    - expalin select titile from film
  - range（索引范围扫描，常用语between、>、<等）
    - expalin select * from payment where customer_id>300 and customer_id<350
  - ref（使用非唯一索引或唯一索引的前缀扫描，返回匹配某个单独值的记录行。ref还经常出现在join中）
    - expalin select * from payment where customer_id = 350
    - expalin selcct b.*,a.* from payment a, customer b where a.customer_id = b.customer_id
  - eq_ref(类似ref，区别是使用唯一索引。即使用primary key或者unique index作为关联条件.*目前仅试验出join情况下，似乎不会在单表查询中出现*)
    - expalin select * from film a,film_text b where a.film_id = b.film_id
  - const/system(单表中最多一个匹配行)
    - desc select * from (select * from film where id =1) a
  - NULL（MySQL不用访问索引，就能直接得到结果）
    - desc select 1 from dual
- possible_keys：查询时可能使用的索引
- key:实际使用的索引
- ken_len:使用到索引字段的长度
- ref:*可能type为ref及eq_ref的join查询时，外键对应的主键*
- rows:扫描行的数量
- Extra:补充说明

##### EXPLAIN EXTENDED ...
- 增加filtered字段。*理论上是扫描行占所有行比例，但目前没看出什么*
- 执行后使用show warnings可看优化后sql。可借此整理复杂sql
##### EXPLAIN PARTITIONS ...
可看到在哪个分区

##### show profiles使用说明
- set profiling =1  不开启无法用
- show profiles
- show profile for query 1

###### profile的值有以下几种
- starting
- checking permissions
- Opening tables
- init
- Systemlock
- optimizing
- statistics
- preparing
- executing
- Sending data MySQL线程开始访问数据行并把结果返回客户端。此时会做大量的磁盘读取。
- end
- queryend
- closing tables
- freeing items
- cleaningup

##### 问题：
- 如何查看tcpdump
- 使用工具对SHOW PROCESSLIST以及SHOW STATUS实时监控
- oprofile
- gdb堆栈跟踪
- pt-pmp将类似堆栈合并
- pt-query-digest！很关键，了解
